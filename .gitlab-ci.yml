stages:
  - Check-Capacity
  - Provisioning
  - Release

before_script:
  - export CI_COMMIT_SHA_SHORT=$(echo ${CI_COMMIT_SHA} | cut -c -8)
  - export BASE_URL=${BASE_URL:-$(echo $CI_PROJECT_URL |  cut -d'/' -f1-3)}
  - >
    if [ "$BASE_URL" == "https://gitlab.cncf.ci" ]; then
      export ENVIRONMENT="pd${ENVIRONMENT}"
    elif [ "$BASE_URL" == "https://gitlab.staging.cncf.ci" ]; then
      export ENVIRONMENT="sg${ENVIRONMENT}"
    elif [ "$BASE_URL" == "https://gitlab.dev.cncf.ci" ]; then
      export ENVIRONMENT="dv${ENVIRONMENT}"
    elif [ "$BASE_URL" == "https://gitlab.cidev.cncf.ci" ]; then
      export ENVIRONMENT="ci${ENVIRONMENT}"
    else
      echo "Environment unknown: $BASE_URL"
      exit 1
    fi

Check-Capacity:
  stage: Check-Capacity
  image: debian:stretch
  only:
    variables:
      - $DESTROY == null
  script:
    - >
      if [ -z "$DESTROY" ]; then
         apt update && apt -y install jq curl
      else
         echo "Skip for destroy"
         exit 0
      fi
    - >
      if [ $CI_COMMIT_REF_NAME == "production" ]; then
         echo "Checking for reserved servers."
         export RESERVED=true
      else
         echo "Checking for on-demand servers."
         export RESERVED=false
      fi
    - source ./capacity.sh
    - echo "export TF_VAR_packet_facility=$FACILITY" > facility.env

  artifacts:
    name: "${CI_JOB_NAME}_${CI_COMMIT_REF_NAME}"
    untracked: true
    expire_in: 5 weeks
    paths:
      - facility.env

Provisioning:
  stage: Provisioning
  image:
    name: hashicorp/terraform:0.12.2
    entrypoint: [""]
  script:
    - >
      if [ -z "$DESTROY" ]; then
         source facility.env
      fi
    - echo $TF_VAR_packet_facility
    - export TF_VAR_name="$NAME-$ENVIRONMENT"
    - >
      if [ $CI_COMMIT_REF_NAME == "production" ]; then
         echo "Write reserved node config"
         mv ./terraform/reserved_override ./terraform/override.tf
      else
         echo "Skipping reservations"
      fi
    - cd terraform
    - terraform init -backend-config "bucket=${AWS_BUCKET}" -backend-config "key=${TF_VAR_name}" -backend-config "region=${AWS_DEFAULT_REGION}"
    - >
      if [ -z "$DESTROY" ]; then
         terraform apply -auto-approve
      else
         terraform destroy -force
      fi
  dependencies:
    - Check-Capacity
  artifacts:
    name: "${CI_JOB_NAME}_${CI_COMMIT_REF_NAME}"
    untracked: true
    expire_in: 5 weeks
    paths:
      - .terraform

Release:
  stage: Release
  only:
    variables:
      - $DESTROY == null
  image:
    name: hashicorp/terraform:0.12.2
    entrypoint: [""]
  script:
    - cd terraform
    - MASTERS=$(terraform output "masters")
    - WORKERS=$(terraform output "workers")
    - echo "MASTERS=($MASTERS)" > nodes.env
    - echo "WORKERS=($WORKERS)" >> nodes.env
  dependencies:
    - Provisioning
  artifacts:
    name: "${CI_JOB_NAME}_${CI_COMMIT_REF_NAME}"
    untracked: true
    expire_in: 5 weeks
    paths:
      - terraform/nodes.env

